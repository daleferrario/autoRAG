---
AWSTemplateFormatVersion: "2010-09-09"
Description: "AWS CloudFormation Template for AutoRAG. Deploys VPC and networking resources and an EC2 webserver."
Parameters:
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id"
    Description: "The Ubuntu 22.04 LTS Stable AMI ID from SSM Parameter Store"
  KeyPair:
    Description: Name of the keypair to use for SSH access
    Type: String
  ChromaVersion:
    Description: Chroma version to install
    Type: String
    Default: 0.5.0
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: m7g.large
  ModelName:
    Description: LLM model name to deploy
    Type: String
    Default: tinydolphin
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: 10.0.0.0/16
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Fn::GetAtt:
          - VPC
          - DefaultNetworkAcl
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP ingress
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId:
        Ref: LatestAmiId
      NetworkInterfaces:
        - GroupSet:
            - Ref: WebServerSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId:
            Ref: PublicSubnet
      KeyName:
        Ref: KeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 32 # Size in GiB
            VolumeType: gp2 # General Purpose SSD
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # docker
          apt-get install apt-transport-https ca-certificates curl software-properties-common -y
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt update
          apt-cache policy docker-ce
          apt install docker-ce -y
          usermod -aG docker ubuntu
          # ollama
          docker run -d -v ollama:/root/.ollama -p 11434:11434 --name ollama ollama/ollama
          while [ $(docker inspect -f {{.State.Running}} ollama) != "true" ]; do
            echo "Waiting for container to be up..."
            sleep 1
          done
          docker exec ollama ollama run ${ModelName}
          # chroma
          docker pull chromadb/chroma
          docker run -d -p 8000:8000 --name chromadb chromadb/chroma
          # app
          docker pull ajferrario/autorag:latest
          mkdir /home/ubuntu/data
          chown ubuntu /home/ubuntu/data

Outputs:
  URL:
    Description: URL of the RAG server
    Value:
      Fn::GetAtt:
        - WebServerInstance
        - PublicDnsName
