---
AWSTemplateFormatVersion: "2010-09-09"

Description: "AWS CloudFormation Template for AutoRAG. Deploys VPC and networking resources and an EC2 webserver."

Parameters:
  KeyPair:
    Description: Name of the keypair to use for SSH access
    Type: String
  DiscordBotKey:
    Description: Bot Key for discord app
    Type: String
  ChromaVersion:
    Description: Chroma version to install
    Type: String
    Default: 0.5.0
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
  ModelName:
    Description: LLM model name to deploy
    Type: String
    Default: tinydolphin

Mappings:
  RegionMap:
    ap-south-1:
      AMIID: ami-09a8acc2f5e8e57fc
    eu-north-1:
      AMIID: ami-0d47c2063be189fce
    eu-west-3:
      AMIID: ami-087105eddcce56a62
    eu-west-2:
      AMIID: ami-0b5f907d2c783b251
    eu-west-1:
      AMIID: ami-0e1fae342f89b4159
    ap-northeast-3:
      AMIID: ami-0ba99e31f74da9be3
    ap-northeast-2:
      AMIID: ami-0fa30a83d31fe23b7
    ap-northeast-1:
      AMIID: ami-09b74ffed30c40197
    ca-central-1:
      AMIID: ami-0ab8e7f01912d7c19
    sa-east-1:
      AMIID: ami-0e3e137cb772e797b
    ap-southeast-1:
      AMIID: ami-0ef3c6e4897db11e2
    ap-southeast-2:
      AMIID: ami-0959229bf16364532
    eu-central-1:
      AMIID: ami-045ce093c1b9bab97
    us-east-1:
      AMIID: ami-08f2838a07f464634
    us-east-2:
      AMIID: ami-02d7f904d20fb845c
    us-west-1:
      AMIID: ami-0aae8920875bc744a
    us-west-2:
      AMIID: ami-077157cfd5b5214eb

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: 10.0.0.0/16

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 10.0.0.0/24

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Fn::GetAtt:
          - VPC
          - DefaultNetworkAcl

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP ingress
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId: !FindInMap
        - RegionMap
        - !Ref "AWS::Region"
        - AMIID
      NetworkInterfaces:
        - GroupSet:
            - Ref: WebServerSecurityGroup
          AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          DeleteOnTermination: "true"
          SubnetId:
            Ref: PublicSubnet
      KeyName:
        Ref: KeyPair
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 96 # Size in GiB
            VolumeType: gp2 # General Purpose SSD
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          if nvidia-smi -L &> /dev/null; then
            echo "GPU detected."
            GPU_OPTION="--gpus all"
          else
            echo "No GPU detected."
            GPU_OPTION=""
          fi
          docker network create distill_network
          docker run $GPU_OPTION --restart=always -d -v ollama:/root/.ollama -p 11434:11434 --network distill_network --name ollama ollama/ollama
          while [ $(docker inspect -f "{{.State.Running}}" ollama) != "true" ]; do
            echo "Waiting for container to be up..."
            sleep 1
          done
          docker exec ollama ollama run ${ModelName}
          # chroma
          docker volume create chromadb-data
          docker run --restart=always -d -p 8000:8000 -v chromadb-data:/data --network distill_network --name chromadb chromadb/chroma
          # discord
          docker run --restart=always -d -e BOT_KEY=${DiscordBotKey} --network distill_network --name discord_bot ajferrario/distill/discord-bot

Outputs:
  URL:
    Description: URL of the RAG server
    Value:
      Fn::GetAtt:
        - WebServerInstance
        - PublicDnsName
